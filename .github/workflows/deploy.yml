name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

jobs:
  deploy:
    name: Deploy to moshe-makies.dev
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Validate and Debug Secrets
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          echo "üîç Validating secrets..."
          
          # Validate SSH_PRIVATE_KEY
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "‚ùå ERROR: SSH_PRIVATE_KEY is not set or is empty"
            exit 1
          else
            echo "‚úÖ SSH_PRIVATE_KEY is set"
            echo "   Length: ${#SSH_PRIVATE_KEY} characters"
            echo "   First 20 chars: ${SSH_PRIVATE_KEY:0:20}..."
            # Check if it looks like a valid private key
            if echo "$SSH_PRIVATE_KEY" | grep -q "BEGIN.*PRIVATE KEY"; then
              echo "   Format: Appears to be a valid private key"
            else
              echo "   ‚ö†Ô∏è  Warning: Does not appear to start with a private key header"
            fi
          fi
          
          # Validate SERVER_IP
          if [ -z "$SERVER_IP" ]; then
            echo "‚ùå ERROR: SERVER_IP is not set or is empty"
            exit 1
          else
            echo "‚úÖ SERVER_IP is set"
            echo "   Value: $SERVER_IP"
          fi
          
          # Validate SERVER_USER
          if [ -z "$SERVER_USER" ]; then
            echo "‚ùå ERROR: SERVER_USER is not set or is empty"
            exit 1
          else
            echo "‚úÖ SERVER_USER is set"
            echo "   Value: $SERVER_USER"
          fi
          
          # Validate DOMAIN
          if [ -z "$DOMAIN" ]; then
            echo "‚ùå ERROR: DOMAIN is not set or is empty"
            exit 1
          else
            echo "‚úÖ DOMAIN is set"
            echo "   Value: $DOMAIN"
          fi
          
          echo ""
          echo "‚úÖ All required secrets are validated successfully!"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'ENDSSH'
            set -e

            echo "üöÄ Starting deployment to moshe-makies.dev..."

            TARGET_DIR="$HOME/portfolio"

            # Navigate to project directory or clone if it doesn't exist
            if [ -d "$TARGET_DIR/.git" ]; then
              cd "$TARGET_DIR"
              echo "üì¶ Pulling latest changes..."
              git pull origin main
            else
              echo "üì¶ Cloning repository into $TARGET_DIR..."
              mkdir -p "$TARGET_DIR"
              git clone https://github.com/MosheHM/My-windows-XP-Portfolio.git "$TARGET_DIR"
              cd "$TARGET_DIR"
            fi

            # Check docker - if docker requires sudo, use sudo prefix
            if docker info >/dev/null 2>&1; then
              DOCKER_CMD="docker"
            else
              echo "‚ÑπÔ∏è docker requires sudo; using sudo for docker commands"
              DOCKER_CMD="sudo docker"
            fi

            # Build Docker images
            echo "üî® Building Docker images..."
            $DOCKER_CMD build -t portfolio-client:latest ./client
            $DOCKER_CMD build -t llm-service:latest ./services/llm-service
            $DOCKER_CMD build -t file-service:latest ./services/file-service

            # Deploy to Kubernetes
            echo "‚ò∏Ô∏è  Deploying to Kubernetes..."
            kubectl apply -f k8s/namespace.yaml
            kubectl apply -f k8s/configmap.yaml -n portfolio
            kubectl apply -f k8s/llm-service-deployment.yaml -n portfolio
            kubectl apply -f k8s/file-service-deployment.yaml -n portfolio
            kubectl apply -f k8s/client-deployment.yaml -n portfolio

            echo "‚è≥ Waiting for services to be ready..."
            kubectl wait --for=condition=available --timeout=300s deployment/portfolio-client -n portfolio || true
            kubectl wait --for=condition=available --timeout=300s deployment/file-service -n portfolio || true

            echo "üìä Deployment status:"
            kubectl get pods -n portfolio

            NODE_PORT=$(kubectl get svc client-service -n portfolio -o jsonpath='{.spec.ports[0].nodePort}')
            echo "‚úÖ Deployment successful!"
            echo "üåê Application is running at http://moshe-makies.dev:${NODE_PORT}"

            echo "üßπ Cleaning up old Docker images..."
            $DOCKER_CMD image prune -f

          ENDSSH

      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment completed!"
          echo "üåê Visit: http://moshe-makies.dev"
