name: Manual Deployment & Rollback

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback
          - restart
      branch:
        description: 'Branch to deploy (for deploy action)'
        required: false
        default: 'main'

jobs:
  deploy:
    name: Execute ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy'
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          BRANCH: ${{ github.event.inputs.branch }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'ENDSSH'
            set -e

            echo "🚀 Manual deployment initiated..."
            echo "📌 Branch: $BRANCH"

            cd /opt/portfolio

            # Pull latest changes from specified branch
            git fetch origin
            git checkout $BRANCH
            git pull origin $BRANCH

            # Build Docker images
            echo "🔨 Building Docker images..."
            docker build -t portfolio-client:latest ./client
            docker build -t llm-service:latest ./services/llm-service
            docker build -t file-service:latest ./services/file-service

            # Deploy to Kubernetes
            echo "☸️  Deploying to Kubernetes..."
            kubectl apply -f k8s/namespace.yaml
            kubectl apply -f k8s/configmap.yaml -n portfolio
            kubectl apply -f k8s/llm-service-deployment.yaml -n portfolio
            kubectl apply -f k8s/file-service-deployment.yaml -n portfolio
            kubectl apply -f k8s/client-deployment.yaml -n portfolio

            # Wait and verify
            echo "⏳ Waiting for deployments..."
            kubectl wait --for=condition=available --timeout=300s deployment/portfolio-client -n portfolio || true

            kubectl get pods -n portfolio
            echo "✅ Deployment successful!"

            docker image prune -f
          ENDSSH

  rollback:
    name: Rollback deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    permissions: {}

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Rollback on server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'ENDSSH'
            set -e

            echo "⏪ Rolling back deployment..."

            cd /opt/portfolio

            # Get previous commit
            CURRENT_COMMIT=$(git rev-parse HEAD)
            PREVIOUS_COMMIT=$(git rev-parse HEAD^)

            echo "Current commit: $CURRENT_COMMIT"
            echo "Rolling back to: $PREVIOUS_COMMIT"

            # Rollback to previous commit
            git reset --hard $PREVIOUS_COMMIT

            # Build Docker images
            echo "🔨 Building Docker images from previous version..."
            docker build -t portfolio-client:latest ./client
            docker build -t llm-service:latest ./services/llm-service
            docker build -t file-service:latest ./services/file-service

            # Redeploy to Kubernetes
            echo "☸️  Redeploying to Kubernetes..."
            kubectl apply -f k8s/namespace.yaml
            kubectl apply -f k8s/configmap.yaml -n portfolio
            kubectl apply -f k8s/llm-service-deployment.yaml -n portfolio
            kubectl apply -f k8s/file-service-deployment.yaml -n portfolio
            kubectl apply -f k8s/client-deployment.yaml -n portfolio

            # Restart deployments to pick up new images
            kubectl rollout restart deployment/portfolio-client -n portfolio
            kubectl rollout restart deployment/file-service -n portfolio
            kubectl rollout restart deployment/llm-service -n portfolio

            # Wait and verify
            echo "⏳ Waiting for rollback to complete..."
            kubectl wait --for=condition=available --timeout=300s deployment/portfolio-client -n portfolio || true

            kubectl get pods -n portfolio
            echo "✅ Rollback successful!"
          ENDSSH

  restart:
    name: Restart services
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'restart'
    permissions: {}

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Restart services on server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'ENDSSH'
            set -e

            echo "🔄 Restarting services..."

            cd /opt/portfolio

            # Restart all deployments in Kubernetes
            kubectl rollout restart deployment/portfolio-client -n portfolio
            kubectl rollout restart deployment/file-service -n portfolio
            kubectl rollout restart deployment/llm-service -n portfolio

            # Wait and verify
            echo "⏳ Waiting for services to restart..."
            kubectl wait --for=condition=available --timeout=300s deployment/portfolio-client -n portfolio || true

            kubectl get pods -n portfolio
            echo "✅ Services restarted successfully!"
          ENDSSH
